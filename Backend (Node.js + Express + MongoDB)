const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("MongoDB Connected"))
    .catch(err => console.log(err));

// User Schema
const User = mongoose.model("User", new mongoose.Schema({
    name: String,
    email: String,
    password: String
}));

// Register Route
app.post("/api/register", async (req, res) => {
    const hashedPassword = await bcrypt.hash(req.body.password, 10);
    const user = new User({ ...req.body, password: hashedPassword });
    await user.save();
    res.json({ message: "User registered successfully" });
});

// Login Route
app.post("/api/login", async (req, res) => {
    const user = await User.findOne({ email: req.body.email });
    if (!user || !(await bcrypt.compare(req.body.password, user.password))) {
        return res.status(401).json({ error: "Invalid credentials" });
    }
    const token = jwt.sign({ userId: user._id }, "secretkey", { expiresIn: "1h" });
    res.json({ token });
});

// API Routes
app.use("/api/fitness", require("./routes/fitness"));
app.use("/api/meals", require("./routes/meals"));
app.use("/api/progress", require("./routes/progress"));

app.listen(5000, () => console.log("Server running on port 5000"));
